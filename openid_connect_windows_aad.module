<?php

declare(strict_types = 1);

/**
 * @file
 * OpenID Connect Windows AAD module file.
 */

use Drupal\Core\Form\FormState;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\openid_connect\Entity\OpenIDConnectClientEntity;
use Drupal\openid_connect_windows_aad\Plugin\OpenIDConnectClient\WindowsAad;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;
use Lcobucci\JWT\Encoding\CannotDecodeContent;
use Lcobucci\JWT\Encoding\JoseEncoder;
use Lcobucci\JWT\Token\InvalidTokenStructure;
use Lcobucci\JWT\Token\Parser;
use Lcobucci\JWT\Token\UnsupportedHeaderFound;

/**
 * Implements hook_openid_connect_userinfo_save().
 */
function openid_connect_windows_aad_openid_connect_userinfo_save(UserInterface $account, array $context) {
  if ($context['plugin_id'] !== 'windows_aad') {
    return;
  }

  try {
    // Ensure windows_aad auth is enabled and configured for group mapping.
    $configuration = \Drupal::config('openid_connect.client.windows_aad');
    $settings = $configuration->get('settings');
    $aad_enabled = (bool) $configuration->get('status');
    if (!$aad_enabled) {
      return;
    }
  } catch (Exception $exception) {
    // Not likely to happen but assume windows_aad is not enabled if it does.
    return;
  }

  // Update user email address on login, if the setting is enabled.
  if ($settings['userinfo_update_email'] && !empty($context['user_data']['email']) && $context['user_data']['email'] !== $account->getEmail()) {
    $account->setEmail($context['user_data']['email']);
  }

  // Map AD groups to Drupal roles, if the setting is enabled.
  if ($settings['map_ad_groups_to_roles'] && (isset($context['user_data']['groups']) || isset($context['userinfo']['groups']['value']))) {

    $mapped_roles = $groups = [];

    $user_roles = $account->getRoles(TRUE);
    $all_roles = Role::loadMultiple();
    unset($all_roles[RoleInterface::ANONYMOUS_ID], $all_roles[RoleInterface::AUTHENTICATED_ID]);

    // Retreive a list of previously mapped roles.
    $UserData = \Drupal::service('user.data');
    $previous_mapped_roles = $UserData->get('openid_connect_windows_aad', $account->id(), 'mapped_roles');
    if (!isset($previous_mapped_roles)) {
      $previous_mapped_roles = [];
    }

    // Groups found in the user_data returned from the auth request.
    if (isset($context['user_data']['groups'])) {
      foreach ($context['user_data']['groups'] as $gid) {
        $groups[$gid] = $gid;
      }
    }

    $group_id_key = 'id';
    // Depending on the API the group data has different keys.
    if ($settings['userinfo_graph_api_wa'] === 1) {
      $group_id_key = 'objectId';
    }
    // Groups found in the userinfo returned from the user info request.
    if (isset($context['userinfo']['groups']['value'])) {
      foreach ($context['userinfo']['groups']['value'] as $group) {
        $groups[$group['displayName']] = $group['displayName'];
        if (!isset($groups[$group[$group_id_key]])) {
          $groups[$group[$group_id_key]] = $group[$group_id_key];
        }
      }
    }

    switch ($settings['group_mapping']['method']) {
      // Manual mapping.
      case 1:
        if (!empty($settings['group_mapping']['mappings'])) {
          $role_group_map = [];

          // The mappings is a text area with each line containing the following
          // format: <role id or label>|<AD Group ID or Label>;<AD Group ID or Label>; ...
          // Thus we need to split the text out into its components and determine
          // if there are any roles that should map to this user.
          $list = explode("\n", $settings['group_mapping']['mappings']);
          $list = array_map('trim', $list);
          $list = array_filter($list, 'strlen');

          foreach ($list as $position => $text) {
            $matches = [];
            if (preg_match('/(.*)\|(.*)/', $text, $matches)) {
              // Trim key and value to avoid unwanted spaces issues.
              $key = trim($matches[1]);
              if (!$key) {
                continue;
              }
              // Ensure we are dealing with the Role's id and not label.
              if (!isset($all_roles[$key])) {
                foreach ($all_roles as $role) {
                  if ($key === $role->label()) {
                    $key = $role->id();
                  }
                }
              }
              if (!isset($all_roles[$key])) {
                continue;
              }
              // Ensure we end up with a non-empty array of AD groups.
              $value = trim($matches[2]);
              $values = explode(';', $value);
              $values = array_map('trim', $values);
              if (!$values) {
                continue;
              }
              // If any of the mappings match the user's groups then the user
              // should be granted the mapped role.
              if (array_intersect($values, $groups)) {
                $mapped_roles[$key] = $key;
              }
            }
          }
        }
        break;

      // Automatic mapping.
      default:
        foreach ($all_roles as $role) {
          // Only Role labels can be matched to the list of the user's groups.
          if (in_array($role->label(), $groups)) {
            $key = $role->id();
            $mapped_roles[$key] = $key;
          }
        }
        break;
    }
    if ($mapped_roles) {
      $mapped_roles = array_keys($mapped_roles);
    }

    // Determine which mapped roles the user does not already have
    $add = array_diff($mapped_roles, $user_roles);

    if ($settings['group_mapping']['strict']) {
      // Strict mode so remove any role the user has that is unmapped.
      $remove = array_diff($user_roles, $mapped_roles);
    } else {
      // Not so strict, only remove roles previously mapped, but nolonger are.
      $remove = array_diff($previous_mapped_roles, $mapped_roles);
    }

    // Remove Drupal roles the user is no longer permitted to have.
    foreach ($remove as $rid) {
      if (isset($all_roles[$rid])) {
        $role = $all_roles[$rid];
        $account->removeRole($rid);
        $vars = [
          '@role' => $role->label(),
          '@user' => $account->id(),
        ];
        \Drupal::logger('openid_connect_windows_aad')
          ->notice('Removed role @role from user @user', $vars);
      }
    }

    // Add Drupal roles that the user should be granted.
    foreach ($add as $rid) {
      $account->addRole($rid);
      $role = $all_roles[$rid];
      $vars = [
        '@role' => $role->label(),
        '@user' => $account->id(),
      ];
      \Drupal::logger('openid_connect_windows_aad')
        ->notice('Added role @role to user @user', $vars);
    }

    // Save which roles were mapped so we can properly handle removing mapped
    // roles that change the next time.
    $UserData->set('openid_connect_windows_aad', $account->id(), 'mapped_roles', $mapped_roles);

  }

}

/**
 * Implements hook_openid_connect_redirect_logout_alter().
 */
function openid_connect_windows_aad_openid_connect_redirect_logout_alter(array &$response, array $context) : void {
  $client = OpenIDConnectClientEntity::load($context['client']);
  if ($client->getPlugin() instanceof WindowsAad && $response['response'] instanceof TrustedRedirectResponse) {
    $idToken = \Drupal::service('openid_connect.session')->retrieveIdToken();
    if (!$idToken) {
      return;
    }
    $parser = new Parser(new JoseEncoder());
    try {
      $token = $parser->parse($idToken);
      $loginHint = $token->claims()->get('login_hint');
      if ($loginHint) {
        $response['response']->setTrustedTargetUrl($response['response']->getTargetUrl() . '&logout_hint=' . $loginHint);
      }
    } catch (CannotDecodeContent | InvalidTokenStructure | UnsupportedHeaderFound $e) {
      // ID Token is incorrect, don't add alter the redirect url.
    }
  }
}
